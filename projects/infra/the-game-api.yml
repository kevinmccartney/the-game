swagger: '2.0'
info:
  title: The Game API
  description: Web services for The Game
  version: 0.1.0
host: the-game.kevinmccartney.is # TODO: this will need to be parameterized for other envs
schemes: [https]
consumes:
  - application/json
produces:
  - application/json
paths:
  /v1/me:
    get:
      operationId: me-get
      summary: Get the authenticated user.
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-me-get
      responses:
        # TODO: add error codes
        '200':
          description: The authenticated user.
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
    patch:
      operationId: me-patch
      summary: Update the authenticated user.
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-me-patch
      parameters:
        - $ref: '#/parameters/MePatchBody'
      responses:
        # TODO: add error codes
        '200':
          $ref: '#/responses/Ok'
    options:
      operationId: me-options
      summary: CORS for the the authenticated user resource
      security: []
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-me-options
      responses:
        '200':
          $ref: '#/responses/CORSSuccess'
  /v1/ping:
    get:
      operationId: ping-get
      summary: Returns pong.
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-ping
      responses:
        '200':
          description: Just pong.
          schema:
            type: string
  /v1/users:
    get:
      operationId: users-get
      summary: Get all users.
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-users-get
      parameters:
        - in: query
          name: name
          type: string
          description: The name of the user to search for.
      responses:
        # TODO: add error codes
        '200':
          description: A list of User objects.
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/AnonymousUser'
    options:
      operationId: users-options
      summary: CORS for the Users resource.
      security: []
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-users-options
      responses:
        '200':
          $ref: '#/responses/CORSSuccess'
  /v1/users/{userId}:
    parameters:
      - in: path
        name: userId
        type: string
        required: true
        description: UID of the user.
    get:
      operationId: users-get-entity
      summary: Get a specific user.
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-users-get-entity
      responses:
        # TODO: add error codes
        '200':
          description: A User object.
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/AnonymousUser'
    options:
      operationId: users-get-options
      summary: CORS for the user scores resource
      security: []
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-users-options
      responses:
        '200':
          $ref: '#/responses/CORSSuccess'
  /v1/users/{userId}/notifications:
    parameters:
      - in: path
        name: userId
        type: string
        required: true
        description: UID of the user the notifications belong to.
    get:
      operationId: user-notifications-get
      summary: Get scores for a user.
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-user-notifications-get
      responses:
        # TODO: add error codes
        '200':
          description: A list of user notifications.
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Notification'
    options:
      operationId: user-notifications-options
      summary: CORS for the user scores resource
      security: []
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-user-notifications-options
      responses:
        '200':
          $ref: '#/responses/CORSSuccess'
  /v1/users/{userId}/points:
    parameters:
      - in: path
        name: userId
        type: string
        required: true
        description: UID of the user the points belong to.
    post:
      operationId: user-points-post
      summary: Assign points to a user.
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-user-points-post
      parameters:
        - in: body
          name: point_post_request
          description: The point to create
          schema:
            type: object
            required:
              - reason
              - points
            properties:
              points:
                type: integer
              reason:
                type: string
      responses:
        # TODO: add error codes
        '201':
          $ref: '#/responses/Created'
    get:
      operationId: user-points-get
      summary: Get points for a user.
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-user-points-get
      responses:
        # TODO: add error codes
        '200':
          description: Points for a user.
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Point'

    options:
      operationId: user-points-options
      summary: CORS for the user points resource
      security: []
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-user-points-options
      responses:
        '200':
          $ref: '#/responses/CORSSuccess'
  /v1/users/{userId}/scores:
    parameters:
      - in: path
        name: userId
        type: string
        required: true
        description: UID of the user the scores belong to.
    get:
      operationId: user-scores-get
      summary: Get scores for a user.
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-user-scores-get
      responses:
        # TODO: add error codes
        '200':
          description: The User Score.
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  points:
                    type: integer
    options:
      operationId: user-scores-options
      summary: CORS for the user scores resource
      security: []
      x-google-backend:
        address: https://us-central1-the-game-388502.cloudfunctions.net/the-game-user-scores-options
      responses:
        '200':
          $ref: '#/responses/CORSSuccess'
security:
  - firebase: []
securityDefinitions:
  firebase:
    authorizationUrl: ''
    flow: 'implicit'
    type: 'oauth2'
    # Replace YOUR-PROJECT-ID with your project ID
    x-google-issuer: 'https://securetoken.google.com/the-game-388502'
    x-google-jwks_uri: 'https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com'
    x-google-audiences: 'the-game-388502'
responses:
  Ok:
    description: Ok.
  Created:
    description: Created.
  CORSSuccess:
    description: CORS headers.
    headers:
      Access-Control-Allow-Origin:
        type: string
        description: Allowed requester origin
      Access-Control-Allow-Methods:
        type: string
        description: Methods allowed on resource
      Access-Control-Allow-Headers:
        type: string
        description: Headers allowed on resource
      Access-Control-Max-Age:
        type: string
        description: How long to cache the results of a preflight request
parameters:
  MePatchBody:
    in: body
    name: me_patch_body
    description: The user data to update
    schema:
      type: object
      required:
        - display_name
        - email
        - username
      properties:
        about_me:
          type: string
        dislikes:
          type: array
          items:
            type: string
        display_name:
          type: string
        email:
          type: string
        likes:
          type: array
          items:
            type: string
        location:
          type: string
        phone_number:
          type: string
        photo_url:
          type: string
        username:
          type: string
definitions:
  AnyValue: {}
  AnonymousUser:
    type: object
    properties:
      uid:
        type: string
      display_name:
        type: string
      username:
        type: string
      photo_url:
        type: string
  User:
    type: object
    properties:
      uid:
        type: string
      display_name:
        type: string
      username:
        type: string
      photo_url:
        type: string
      join_date:
        type: string
      location:
        type: string
      about_me:
        type: string
      likes:
        type: array
        items:
          type: string
      friends:
        type: array
        items:
          type: string
      dislikes:
        type: array
        items:
          type: string
      email:
        type: string
      phone_number:
        type: string
  Point:
    type: object
    properties:
      created_time:
        type: string
      id:
        type: string
      points:
        type: integer
      reason:
        type: string
      subject:
        $ref: '#/definitions/User'
      created_by:
        $ref: '#/definitions/User'
  Notification:
    type: object
    properties:
      uid:
        type: string
      type:
        type: string
      created_time:
        type: string
      payload:
        type: object
        additionalProperties:
          $ref: '#/definitions/AnyValue'
